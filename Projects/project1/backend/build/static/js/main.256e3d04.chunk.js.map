{"version":3,"sources":["stores/UserStore.js","components/InputField.js","components/SubmitButton.js","components/LoginForm.js","App.js","serviceWorker.js","index.js"],"names":["extendObservable","this","loading","isLoggedIn","username","InputField","className","type","props","value","placeholder","onChange","e","target","React","Component","SubmitButton","state","disabled","onClick","handleCLick","text","LoginForm","password","buttonDisabled","bind","setInputValue","resetForm","property","val","trim","length","setState","fetch","method","headers","body","JSON","stringify","res","json","result","success","UserStore","alert","msg","console","log","App","disavled","onCLick","doLogout","observer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.256e3d04.chunk.js","sourcesContent":["import { extendObservable } from \"mobx\"\r\n\r\n/**\r\n * UserStore\r\n */\r\n\r\nclass UserStore {\r\n  constructor() {\r\n    extendObservable(this, {\r\n      loading: true,\r\n      isLoggedIn: false,\r\n      username: \"\"\r\n    })\r\n  }\r\n}\r\n\r\nexport default new UserStore()\r\n","import React from 'react';\r\n\r\nclass InputField extends React.Component{\r\n  render() {\r\n    return (\r\n        <div className=\"inputField\">\r\n          <input\r\n            className=\"input\"\r\n            type={this.props.type}\r\n            value={this.props.value}\r\n            placeholder={this.props.placeholder}\r\n            onChange={(e) => this.props.onChange(e.target.value)}\r\n            />\r\n        </div>\r\n      )\r\n  }\r\n}\r\n\r\nexport default InputField;\r\n","import React from 'react'\r\n\r\nclass SubmitButton extends React.Component{\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n\r\n    };\r\n  }\r\n  render() {\r\n    return (\r\n        <div className=\"submitButton\">\r\n          <button\r\n            className=\"btn\"\r\n            disabled={this.props.disabled}\r\n            onClick={this.props.handleCLick}\r\n            >\r\n            {this.props.text}\r\n          </button>\r\n        </div>\r\n      )\r\n  }\r\n}\r\n\r\nexport default SubmitButton;\r\n","import React from 'react';\r\nimport InputField from \"./InputField\"\r\nimport SubmitButton from \"./SubmitButton\"\r\nimport UserStore from \"../stores/UserStore\"\r\n\r\nclass LoginForm extends React.Component{\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      username: \"\",\r\n      password: \"\",\r\n      buttonDisabled: false\r\n    }\r\n    this.handleCLick = this.handleCLick.bind(this)\r\n    this.setInputValue = this.setInputValue.bind(this)\r\n    this.resetForm = this.resetForm.bind(this)\r\n  }\r\n\r\n  setInputValue(property, val) {\r\n    val = val.trim() // using trim to get rid of spaces\r\n    if (val.length > 12) {\r\n      return\r\n    }\r\n    this.setState({\r\n      [property]: val\r\n    })\r\n  }\r\n\r\n  resetForm() {\r\n    this.setState({\r\n      username: \"\",\r\n      password: \"\",\r\n      buttonDisabled: false\r\n    })\r\n  }\r\n\r\n  async handleCLick() {\r\n    if (!this.state.username) {\r\n      return\r\n    }\r\n    if (!this.state.password) {\r\n      return\r\n    }\r\n    this.setState({\r\n      buttonDisabled: false\r\n    })\r\n    try {\r\n      let res = await fetch('/login', {\r\n        method: 'post',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          username: this.state.username,\r\n          password: this.state.password\r\n        })\r\n      })\r\n      let result = await res.json()\r\n      if (result && result.success) {\r\n        UserStore.isLoggedIn = true\r\n        UserStore.username = result.username\r\n      } else if(result && result.success === false) {\r\n          this.resetForm()\r\n          alert(result.msg)\r\n      }\r\n    } catch (e) {\r\n        console.log(e)\r\n        this.resetForm()\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <div className=\"loginForm\">\r\n          Login In\r\n          <InputField\r\n            type=\"text\"\r\n            placeholder=\"Username\"\r\n            value={this.state.username ? this.state.username : \"\"}\r\n            onChange={ (val) => this.setInputValue('username', val)}\r\n          />\r\n          <InputField\r\n            type=\"password\"\r\n            placeholder=\"Password\"\r\n            value={this.state.password ? this.state.password : \"\"}\r\n            onChange={ (val) => this.setInputValue('password', val)}\r\n          />\r\n          <SubmitButton\r\n            text=\"Login\"\r\n            disabled={this.state.buttonDisabled}\r\n            handleCLick={this.handleCLick}\r\n          />\r\n        </div>\r\n      )\r\n  }\r\n}\r\n\r\nexport default LoginForm;\r\n","import React from 'react'\nimport { observer } from 'mobx-react'\nimport UserStore from \"./stores/UserStore\"\nimport LoginForm from \"./components/LoginForm\"\nimport SubmitButton from \"./components/SubmitButton\"\nimport './App.css';\n\nclass App extends React.Component{\n\n  async componentDidMount() {\n    try {\n      let res = await fetch('/isLoggedIn', {\n        method: 'post',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      })\n      let result = await res.json()\n      if (result && result.success) {\n        UserStore.loading = false\n        UserStore.isLoggedIn = true\n        UserStore.username = result.username\n      } else {\n        UserStore.loading = false\n        UserStore.isLoggedIn = true\n      }\n    } catch (error) {\n      UserStore.loading = false\n      UserStore.isLoggedIn = false\n    }\n  }\n\n  async doLogout() {\n    try {\n      let res = await fetch('/logout', {\n        method: 'post',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      })\n      let result = await res.json()\n      if (result && result.success) {\n        UserStore.isLoggedIn = false\n        UserStore.username = \"\"\n      }\n    }\n    catch (error) {\n      console.log(error)\n    }\n  }\n\n  render() {\n    if (UserStore.loading) {\n      return(\n        <div className=\"app\">\n          <div className=\"container\">\n            loading..\n          </div>\n        </div>\n      )\n    }else {\n      if (UserStore.isLoggedIn) {\n        return (\n            <div className=\"app\">\n              <div className=\"container\">\n               Welcome {UserStore.username}\n               <SubmitButton\n                 text={'Log Out'}\n                 disavled={false}\n                 onCLick={() => this.doLogout()}\n                   />\n                </div>\n            </div>\n          )\n      }\n      return (\n          <div className=\"app\">\n            <div className=\"container\">\n              <LoginForm />\n            </div>\n          </div>\n        )\n    }\n  }\n}\nexport default observer(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}